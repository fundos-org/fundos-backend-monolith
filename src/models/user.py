from sqlmodel import SQLModel, Field
from typing import Optional
from datetime import datetime, timezone
from enum import Enum
import uuid

class Role(str, Enum):
    ADMIN = "admin"
    FUND_MANAGER = "fund_manager"
    INVESTOR = "investor"
    FOUNDER = "founder"
    MENTOR = "mentor"
    VENDOR = "vendor" 

class KycStatus(str, Enum): 
    PENDING = "pending"
    VERIFIED = "verified"
    REJECTED = "rejected" 

class investorType(str, Enum):
    Individual = "individual"
    Entity = "entity" 

class User(SQLModel, table=True):
    id: uuid.UUID = Field(primary_key=True, default_factory=uuid.uuid4)
    invitation_code: str = Field(index=True)  # Generated by fund manager
    onboarding_status: str = Field(default="Not Started") # will change to enum later
    email: Optional[str] = Field(unique=True, index=True, default=None)
    phone_number: Optional[str] = Field(unique=True, index=True, default=None)
    hashed_password: Optional[str] = Field(default=None)
    role: Role = Field(default=Role.INVESTOR)

    # Personal info
    first_name: Optional[str] = Field(default=None)
    last_name: Optional[str] = Field(default=None)
    investor_type: investorType = Field(default = investorType.Individual)
    declaration_accepted : bool = Field(default= True)
    gender: Optional[str] = Field(default=None)  # 'M', 'F', or 'O'
    date_of_birth: Optional[str] = Field(default=None)  # Format: DD-MM-YYYY
    care_of: Optional[str] = Field(default=None)  # e.g., "S/O Father's Name"
    aadhaar_number: Optional[str] = Field(default=None)
    address: Optional[str] = Field(default=None) 

    # professional info
    occupation: str = Field() 
    income_source: float = Field()
    annual_income: float = Field()
    capital_commitment: float = Field() 
    created_at: datetime = Field(default_factory=datetime.now(timezone.utc))
    updated_at: Optional[datetime]
    fund_manager_id: Optional[int] = Field(foreign_key="user.id")  # For investors/founders under a fund manager
    kyc_status: KycStatus = Field(default=KycStatus.PENDING)  # pending, verified, rejected
    profile_image_url: Optional[str] = Field()
    # deals: List[uuid.UUID] = Field(foreign_key="deal.id")
    # investments: List["Investment"] = Relationship(back_populates="investor")