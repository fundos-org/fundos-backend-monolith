from sqlmodel import SQLModel, Field
from typing import Optional
from datetime import datetime, timezone
from enum import Enum
import uuid

class Role(str, Enum):
    ADMIN = "admin"
    FUND_MANAGER = "fund_manager"
    INVESTOR = "investor"
    FOUNDER = "founder"
    MENTOR = "mentor"
    VENDOR = "vendor" 

class KycStatus(str, Enum): 
    PENDING = "pending"
    VERIFIED = "verified"
    REJECTED = "rejected" 

class User(SQLModel, table=True):
    id: uuid.UUID = Field(default=None, primary_key=True, default_factory=uuid.uuid4())
    invitation_code: str = Field(index=True)  # Generated by fund manager
    email: Optional[str] = Field(unique=True, index=True)
    phone_number: Optional[str] = Field(unique=True, index=True)
    hashed_password: Optional[str]
    role: Role = Field(default=Role.INVESTOR)
    occupation: str = Field() 
    income_source: float = Field()
    annual_income: float = Field()
    capital_commitment: float = Field() 
    created_at: datetime = Field(default_factory=datetime.now(timezone.utc))
    updated_at: Optional[datetime]
    fund_manager_id: Optional[int] = Field(foreign_key="user.id")  # For investors/founders under a fund manager
    kyc_status: KycStatus = Field(default=KycStatus.PENDING)  # pending, verified, rejected
    profile_image_url: Optional[str] = Field()
    # deals: List["Deal"] = Relationship(back_populates="fund_manager") 
    # investments: List["Investment"] = Relationship(back_populates="investor")