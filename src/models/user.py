from sqlmodel import SQLModel, Field, Relationship
from typing import Optional
from datetime import datetime
from enum import Enum
from uuid import uuid4, UUID
from typing import List


class Role(str, Enum):
    INVESTOR = "investor"
    FOUNDER = "founder"
    MENTOR = "mentor"
    VENDOR = "vendor" 

class KycStatus(str, Enum): 
    PENDING = "pending"
    VERIFIED = "verified"
    REJECTED = "rejected" 

class investorType(str, Enum):
    Individual = "individual"
    Entity = "entity" 

class User(SQLModel, table=True):
    id: UUID = Field(primary_key=True, default_factory=uuid4)
    invitation_code: str = Field(index=True, foreign_key="subadmin.invite_code")  # Generated by fund manager
    onboarding_status: str = Field(default="Not Started") # will change to enum later
    email: Optional[str] = Field(unique=True, index=True, default=None)
    phone_number: Optional[str] = Field(unique=True, index=True, default=None)
    hashed_password: Optional[str] = Field(default=None)
    role: Role = Field(default=Role.INVESTOR)

    # Personal info
    first_name: Optional[str] = Field(default=None)
    last_name: Optional[str] = Field(default=None)
    investor_type: investorType = Field(default = investorType.Individual)
    declaration_accepted : bool = Field(default= True)
    gender: Optional[str] = Field(default=None)  # 'M', 'F', or 'O'
    date_of_birth: Optional[str] = Field(default=None)  # Format: DD-MM-YYYY
    care_of: Optional[str] = Field(default=None)  # e.g., "S/O Father's Name"
    aadhaar_number: Optional[str] = Field(default=None)
    address: Optional[str] = Field(default=None) 

    # professional info
    occupation: Optional[str] = Field(default=None, nullable=True)
    income_source: Optional[str] = Field(default=None, nullable=True)
    annual_income: Optional[float] = Field(default=None, nullable=True)
    capital_commitment: Optional[float] = Field(default=None, nullable=True)
    agreement_signed: bool = Field(default=True, nullable=True)
    created_at: datetime = Field(default_factory=lambda: datetime.now().replace(tzinfo=None))
    updated_at: Optional[datetime] = Field(default=None, nullable=True)
    fund_manager_id: Optional[UUID] = Field(foreign_key="subadmin.id")  # For investors/founders under a fund manager
    kyc_status: KycStatus = Field(default=KycStatus.PENDING)  # pending, verified, rejected
    profile_image_url: Optional[str] = Field()
    
    # relationships
    deals: List["Deal"] = Relationship(back_populates="fund_manager")  # type: ignore # noqa: F821
    investments: List["Investment"] = Relationship(back_populates="investor")  # type: ignore # noqa: F821
    subadmin: Optional["Subadmin"] = Relationship(back_populates="users")  # type: ignore # noqa: F821

